function saveS = aggr_stats_so1(logWageM, wtM, yearV, ageMin, ageMax, cS)
% Compute aggregate stats, comparable to aggregate cps stats
%{
Inputs can be generated by cs_data_so1

IN
   logWageM(ind, age, school, year)
      sim wage histories
   wtM(ind, age, school, year)
      weights
   yearV
      years in matrices
   ageMin, ageMax
      ages to use, typically cS.aggrAgeRangeV
      must be sufficiently inclusive to compute all stats

OUT
   collPremAgeM(young/old, year)
      college premium young/old by year

Checked: 2014-apr-8
%}
% ----------------------------------------------------------

%% Input check

% Years with wage data
nYr = length(yearV);
% do not truncate model wage distribution
% keepPctV = [0, 1];
nInd = size(logWageM, 1);

if cS.dbg > 10
   if ~v_check(logWageM, 'f', [nInd,ageMax,cS.nSchool,nYr], [],[])
      error('invalid');
   end
   if ~v_check(wtM, 'f', [nInd,ageMax,cS.nSchool,nYr], 0,[])
      error('invalid');
   end
   if ~v_check(yearV, 'i', [], 1930, 2040)
      error('invalid');
   end
   % Ages must be enough to compute young / old college premium
   if ~v_check(ageMin, 'i', [1,1], cS.demogS.workStartAgeV(1), min(cS.collPremAgeM(:)))
      error('invalid');
   end
   if ~v_check(ageMax, 'i', [1,1], max(cS.collPremAgeM(:)), cS.demogS.ageRetire)
      error('invalid');
   end
end



%% Main

% ****  outputs

% Compute these wage percentiles (to match data)
% saveS.wagePctV = cS.aggrWagePctV;
% nPct = length(saveS.wagePctV);

saveS.logMedianWage_tV = repmat(cS.missVal, [nYr, 1]);
saveS.meanLogWage_tV   = repmat(cS.missVal, [nYr, 1]);
saveS.stdLogWage_tV    = repmat(cS.missVal, [nYr, 1]);
% saveS.logWagePctM    = repmat(cS.missVal, [nPct, nYr]);

% Entire wage distribution
%  for 2 years only
% saveS.wagePctChangeYearV = cS.wagePctChangeYearV;
% saveS.wageChangePctV = 0.01 : 0.01 : 1;
% logWagePctM = zeros([length(saveS.wageChangePctV), 2]);

% Stats by school group
saveS.logMedianWage_stM = repmat(cS.missVal, [cS.nSchool, nYr]);
saveS.meanLogWage_stM = repmat(cS.missVal, [cS.nSchool, nYr]);
saveS.stdLogWage_stM  = repmat(cS.missVal, [cS.nSchool, nYr]);

% For young and old, so that college wage premium can be computed for them
ngAge = size(cS.youngOldAgeM, 1);
saveS.logMedianWage_YoungOld_stM = repmat(cS.missVal, [ngAge, cS.nSchool, nYr]);
saveS.meanLogWage_YoungOld_stM = repmat(cS.missVal, [ngAge, cS.nSchool, nYr]);
saveS.stdLogWage_YoungOld_stM  = repmat(cS.missVal, [ngAge, cS.nSchool, nYr]);


% Loop over years
for iy = 1 : nYr
   % Make a matrix of wages and weights by [ind, age, school]
   yrLogWageM  = logWageM(:, ageMin:ageMax, :, iy);
   yrWtM       = wtM(:, ageMin:ageMax, :, iy) .* (yrLogWageM ~= cS.missVal);
   
   % ***  Compute statistics for all
   idxV = find(yrWtM > 0  &  yrLogWageM ~= cS.missVal);
   
   saveS.logMedianWage_tV(iy) = weighted_median(yrLogWageM(idxV), yrWtM(idxV), cS.dbg);
   [saveS.stdLogWage_tV(iy), saveS.meanLogWage_tV(iy)] = std_w(yrLogWageM(idxV), yrWtM(idxV), cS.dbg);
%    [saveS.meanLogWage_tV(iy), saveS.stdLogWage_tV(iy), saveS.logWagePctM(:, iy)] = ...
%       distrib_trunc_lh(yrLogWageM(idxV), yrWtM(idxV), keepPctV, saveS.wagePctV, cS.dbg);
   
   % Entire wage distribution for 2 years
%    yrIdx = find(year1 == saveS.wagePctChangeYearV);
%    if ~isempty(yrIdx)
%       [~,~,logWagePctM(:,yrIdx)] = distrib_trunc_lh(yrLogWageM(idxV), yrWtM(idxV), keepPctV, saveS.wageChangePctV, cS.dbg);
%    end
   
   
   % ***  By school group
   for iSchool = 1 : cS.nSchool
      syWtM = yrWtM(:, :, iSchool);
      syWageM = yrLogWageM(:, :, iSchool);
      idxV = find(syWtM > 0);
      saveS.logMedianWage_stM(iSchool,iy) = weighted_median(syWageM(idxV), syWtM(idxV), cS.dbg);
      [saveS.stdLogWage_stM(iSchool,iy), saveS.meanLogWage_stM(iSchool,iy)] = ...
         std_w(syWageM(idxV), syWtM(idxV), cS.dbg);
         % distrib_trunc_lh(log(syWageM(idxV)), syWtM(idxV), keepPctV, saveS.wagePctV, cS.dbg);
   end
   
   % ***  by school / age
   for iSchool = 1 : cS.nSchool
      for iAge = 1 : ngAge
         % Age range for this group
         ageRangeV = cS.youngOldAgeM(iAge, 1) : cS.youngOldAgeM(iAge, 2);
         % Indices into matrices
         ageIdxV  = ageRangeV - ageMin + 1;
         syWtM    = yrWtM(:, ageIdxV, iSchool);
         syWageM  = yrLogWageM(:, ageIdxV, iSchool);
         idxV     = find(syWtM > 0);
         saveS.logMedianWage_YoungOld_stM(iAge,iSchool,iy) = ...
            weighted_median(syWageM(idxV), syWtM(idxV), cS.dbg);
         [saveS.stdLogWage_YoungOld_stM(iAge,iSchool,iy), saveS.meanLogWage_YoungOld_stM(iAge,iSchool,iy)] = ...
            std_w(syWageM(idxV), syWtM(idxV), cS.dbg);
      end
   end
end

% Change in wage distribution
% saveS.logWagePctChangeV = logWagePctM(:,2) - logWagePctM(:,1);


%% College premium

% Young and old college premium
saveS.collPrem_YoungOld_tM = repmat(cS.missVal, [ngAge, nYr]);
saveS.medianCollPrem_YoungOld_tM = repmat(cS.missVal, [ngAge, nYr]);
for iAge = 1 : ngAge
   cgV  = saveS.meanLogWage_YoungOld_stM(iAge, cS.schoolCG, :);
   hsgV = saveS.meanLogWage_YoungOld_stM(iAge, cS.schoolHSG, :);
   cgV  = cgV(:);
   hsgV = hsgV(:);
   idxV = find(cgV ~= cS.missVal  &  hsgV ~= cS.missVal);
   saveS.collPrem_YoungOld_tM(iAge, idxV) = cgV(idxV) - hsgV(idxV);

   cgV  = saveS.logMedianWage_YoungOld_stM(iAge, cS.schoolCG, :);
   hsgV = saveS.logMedianWage_YoungOld_stM(iAge, cS.schoolHSG, :);
   cgV  = cgV(:);
   hsgV = hsgV(:);
   idxV = find(cgV ~= cS.missVal  &  hsgV ~= cS.missVal);
   saveS.medianCollPrem_YoungOld_tM(iAge, idxV) = cgV(idxV) - hsgV(idxV);
end

% Aggregate college premium by year
saveS.collPrem_tV = repmat(cS.missVal, [nYr, 1]);
cgV  = saveS.meanLogWage_stM(cS.schoolCG, :);
hsgV = saveS.meanLogWage_stM(cS.schoolHSG, :);
idxV = find(cgV ~= cS.missVal  &  hsgV ~= cS.missVal);
saveS.collPrem_tV(idxV) = cgV(idxV) - hsgV(idxV);

saveS.medianCollPrem_tV = repmat(cS.missVal, [nYr, 1]);
cgV  = saveS.logMedianWage_stM(cS.schoolCG, :);
hsgV = saveS.logMedianWage_stM(cS.schoolHSG, :);
idxV = find(cgV ~= cS.missVal  &  hsgV ~= cS.missVal);
saveS.medianCollPrem_tV(idxV) = cgV(idxV) - hsgV(idxV);


% Save
saveS.yearV = yearV;
%var_save_so1(saveS, cS.vAggrStats, cS);


%% Output check
if cS.dbg > 10
   if ~v_check(saveS.meanLogWage_stM, 'f', [cS.nSchool, nYr], -10, 10, cS.missVal)
      error_so1('Invalid');
   end
   if ~v_check(saveS.logMedianWage_stM, 'f', [cS.nSchool, nYr], -10, 10, cS.missVal)
      error_so1('Invalid');
   end
end


end